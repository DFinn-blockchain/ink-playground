cargo run --package crate-extractor -- create \
	-m crates/contract/Cargo.toml \
	-o packages/_generated/change/src/change.json
Creating .json file, using: "crates/contract/Cargo.toml"
Change { roots: [SourceRoot { is_library: true, file_set: FileSet { n_files: 1 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 4 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 11 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 9 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 66 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 15 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 3 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 1 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 12 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 2 } }, SourceRoot { is_library: false, file_set: FileSet { n_files: 1 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 5 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 1 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 53 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 14 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 3 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 1 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 15 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 27 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 8 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 4 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 7 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 3 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 9 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 27 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 29 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 24 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 33 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 7 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 6 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 1 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 4 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 19 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 10 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 66 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 3 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 211 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 20 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 23 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 6 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 9 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 6 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 1 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 12 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 9 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 4 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 26 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 3 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 6 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 15 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 4 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 14 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 5 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 21 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 18 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 12 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 5 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 10 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 2 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 81 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 2 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 4 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 15 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 8 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 13 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 13 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 5 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 5 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 4 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 7 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 1218 } }, SourceRoot { is_library: true, file_set: FileSet { n_files: 0 } }], files_changed: 2321, crate_graph: Some(CrateGraph { arena: {CrateId(0): CrateData { root_file_id: FileId(0), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("alloc"), canonical_name: "alloc" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }], proc_macro: [], origin: Lang }, CrateId(189): CrateData { root_file_id: FileId(191), edition: Edition2015, version: Some("1.0.137"), display_name: Some(CrateDisplayName { crate_name: CrateName("serde"), canonical_name: "serde" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=default", "feature=derive", "feature=serde_derive", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=default", "feature=derive", "feature=rc", "feature=serde_derive", "feature=std", "feature=unstable", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.137", "CARGO_PKG_VERSION": "1.0.137", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "serde", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "serde", "CARGO_PKG_VERSION_PATCH": "137", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(191), name: CrateName("serde_derive"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/serde-rs/serde") } }, CrateId(55): CrateData { root_file_id: FileId(56), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("add_assign"), canonical_name: "add_assign" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(244): CrateData { root_file_id: FileId(246), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_transparent"), canonical_name: "test_transparent" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(110): CrateData { root_file_id: FileId(111), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_lang_ir"), canonical_name: "ink_lang_ir" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_lang_ir-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_lang_ir", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_lang_ir", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(33), name: CrateName("blake2"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(165): CrateData { root_file_id: FileId(167), edition: Edition2018, version: Some("1.1.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("proc_macro_crate"), canonical_name: "proc-macro-crate" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro-crate-1.1.3", "CARGO_PKG_VERSION": "1.1.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "proc_macro_crate", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "proc-macro-crate", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(249), name: CrateName("toml"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bkchr/proc-macro-crate") } }, CrateId(31): CrateData { root_file_id: FileId(31), edition: Edition2021, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("eq"), canonical_name: "eq" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=atomic", "feature=default", "feature=serde", "feature=std", "feature=testing", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "bitvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "bitvec", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(83), name: CrateName("funty"), prelude: true }, Dependency { crate_id: CrateId(176), name: CrateName("radium"), prelude: true }, Dependency { crate_id: CrateId(234), name: CrateName("tap"), prelude: true }, Dependency { crate_id: CrateId(265), name: CrateName("wyz"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/bitvec") } }, CrateId(220): CrateData { root_file_id: FileId(222), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_shebang"), canonical_name: "test_shebang" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(86): CrateData { root_file_id: FileId(87), edition: Edition2015, version: Some("0.14.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("iter"), canonical_name: "iter" }), cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "feature=serde", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.14.5", "CARGO_PKG_VERSION": "0.14.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "generic_array", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "generic-array", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "14", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/fizyk20/generic-array.git") } }, CrateId(141): CrateData { root_file_id: FileId(143), edition: Edition2015, version: Some("0.2.126"), display_name: Some(CrateDisplayName { crate_name: CrateName("const_fn"), canonical_name: "const_fn" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=align", "feature=const-extern-fn", "feature=default", "feature=extra_traits", "feature=rustc-dep-of-std", "feature=rustc-std-workspace-core", "feature=std", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.126", "CARGO_PKG_VERSION": "0.2.126", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "libc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "libc", "CARGO_PKG_VERSION_PATCH": "126", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(140), name: CrateName("libc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-lang/libc") } }, CrateId(7): CrateData { root_file_id: FileId(7), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("std_detect"), canonical_name: "std_detect" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [], proc_macro: [], origin: Lang }, CrateId(196): CrateData { root_file_id: FileId(198), edition: Edition2018, version: Some("0.10.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("sha3"), canonical_name: "sha3" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/sha3-0.10.1", "CARGO_PKG_VERSION": "0.10.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "sha3", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "sha3", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }, Dependency { crate_id: CrateId(138), name: CrateName("keccak"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(62): CrateData { root_file_id: FileId(63), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("deref_mut"), canonical_name: "deref_mut" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(251): CrateData { root_file_id: FileId(253), edition: Edition2018, version: Some("0.5.9"), display_name: Some(CrateDisplayName { crate_name: CrateName("toml2json"), canonical_name: "toml2json" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=indexmap", "feature=preserve_order", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/toml-0.5.9", "CARGO_PKG_VERSION": "0.5.9", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "toml", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "toml", "CARGO_PKG_VERSION_PATCH": "9", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "5", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(249), name: CrateName("toml"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/toml-rs") } }, CrateId(117): CrateData { root_file_id: FileId(119), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("itertools"), canonical_name: "itertools" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(172): CrateData { root_file_id: FileId(174), edition: Edition2018, version: Some("1.0.39"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=nightly", "feature=proc-macro", "feature=span-locations", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.39", "CARGO_PKG_VERSION": "1.0.39", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "proc_macro2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "proc-macro2", "CARGO_PKG_VERSION_PATCH": "39", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/proc-macro2") } }, CrateId(38): CrateData { root_file_id: FileId(38), edition: Edition2018, version: Some("0.10.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("block_buffer"), canonical_name: "block-buffer" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2", "CARGO_PKG_VERSION": "0.10.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "block_buffer", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "block-buffer", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/utils") } }, CrateId(227): CrateData { root_file_id: FileId(229), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_round_trip"), canonical_name: "test_round_trip" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(93): CrateData { root_file_id: FileId(94), edition: Edition2018, version: Some("0.2.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("rdrand"), canonical_name: "rdrand" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=compiler_builtins", "feature=core", "feature=custom", "feature=js", "feature=js-sys", "feature=rdrand", "feature=rustc-dep-of-std", "feature=std", "feature=test-in-browser", "feature=wasm-bindgen", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.6", "CARGO_PKG_VERSION": "0.2.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "getrandom", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "getrandom", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(92), name: CrateName("getrandom"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(140), name: CrateName("libc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-random/getrandom") } }, CrateId(148): CrateData { root_file_id: FileId(150), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("variant_number"), canonical_name: "variant_number" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(14): CrateData { root_file_id: FileId(14), edition: Edition2015, version: Some("0.3.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("simple_case"), canonical_name: "simple-case" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6", "CARGO_PKG_VERSION": "0.3.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayref", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayref", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "3", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(11), name: CrateName("arrayref"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/droundy/arrayref") } }, CrateId(203): CrateData { root_file_id: FileId(205), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_token_trees"), canonical_name: "test_token_trees" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(69): CrateData { root_file_id: FileId(70), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("into"), canonical_name: "into" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(258): CrateData { root_file_id: FileId(260), edition: Edition2018, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("static_size"), canonical_name: "static_size" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-ident-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "unicode_ident", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "unicode-ident", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/unicode-ident") } }, CrateId(124): CrateData { root_file_id: FileId(126), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("zip"), canonical_name: "zip" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(179): CrateData { root_file_id: FileId(181), edition: Edition2018, version: Some("0.3.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("rand_chacha"), canonical_name: "rand_chacha" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=serde", "feature=serde1", "feature=simd", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_chacha-0.3.1", "CARGO_PKG_VERSION": "0.3.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "rand_chacha", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "rand_chacha", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "3", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(164), name: CrateName("ppv_lite86"), prelude: true }, Dependency { crate_id: CrateId(180), name: CrateName("rand_core"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-random/rand") } }, CrateId(45): CrateData { root_file_id: FileId(45), edition: Edition2018, version: Some("1.0.73"), display_name: Some(CrateDisplayName { crate_name: CrateName("test"), canonical_name: "test" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=jobserver", "feature=parallel", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.73", "CARGO_PKG_VERSION": "1.0.73", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cc", "CARGO_PKG_VERSION_PATCH": "73", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(41), name: CrateName("cc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/cc-rs") } }, CrateId(234): CrateData { root_file_id: FileId(236), edition: Edition2015, version: Some("1.0.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("tap"), canonical_name: "tap" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1", "CARGO_PKG_VERSION": "1.0.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "tap", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "tap", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/myrrlyn/tap") } }, CrateId(100): CrateData { root_file_id: FileId(101), edition: Edition2018, version: Some("0.3.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("input"), canonical_name: "input" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/impl-serde-0.3.2", "CARGO_PKG_VERSION": "0.3.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "impl_serde", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "impl-serde", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "3", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(98), name: CrateName("impl_serde"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: None } }, CrateId(155): CrateData { root_file_id: FileId(157), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("chain_error"), canonical_name: "chain-error" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(21): CrateData { root_file_id: FileId(21), edition: Edition2015, version: Some("1.1.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("versions"), canonical_name: "versions" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-1.1.0", "CARGO_PKG_VERSION": "1.1.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "autocfg", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "autocfg", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(20), name: CrateName("autocfg"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/cuviper/autocfg") } }, CrateId(210): CrateData { root_file_id: FileId(212), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_asyncness"), canonical_name: "test_asyncness" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(76): CrateData { root_file_id: FileId(77), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("is_variant"), canonical_name: "is_variant" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(265): CrateData { root_file_id: FileId(267), edition: Edition2018, version: Some("0.5.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("wyz"), canonical_name: "wyz" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=default", "feature=garbage", "feature=once_cell", "feature=std", "feature=typemap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.5.0", "CARGO_PKG_VERSION": "0.5.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "wyz", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "wyz", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "5", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(234), name: CrateName("tap"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/myrrlyn/wyz") } }, CrateId(131): CrateData { root_file_id: FileId(133), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("tuples"), canonical_name: "tuples" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(186): CrateData { root_file_id: FileId(188), edition: Edition2015, version: Some("0.22.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("generate_keys"), canonical_name: "generate_keys" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=global-context", "feature=recovery", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=bitcoin-hashes-std", "feature=bitcoin_hashes", "feature=default", "feature=global-context", "feature=global-context-less-secure", "feature=lowmemory", "feature=rand", "feature=rand-std", "feature=recovery", "feature=serde", "feature=std", "feature=unstable", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1", "CARGO_PKG_VERSION": "0.22.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "secp256k1", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "secp256k1", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "22", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(183), name: CrateName("secp256k1"), prelude: true }, Dependency { crate_id: CrateId(187), name: CrateName("secp256k1_sys"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-bitcoin/rust-secp256k1/") } }, CrateId(52): CrateData { root_file_id: FileId(52), edition: Edition2018, version: Some("0.2.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("x86"), canonical_name: "x86" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cpufeatures-0.2.2", "CARGO_PKG_VERSION": "0.2.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cpufeatures", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cpufeatures", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(50), name: CrateName("cpufeatures"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/utils") } }, CrateId(241): CrateData { root_file_id: FileId(243), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_path"), canonical_name: "test_path" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(107): CrateData { root_file_id: FileId(108), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_env"), canonical_name: "ink_env" }), cfg_options: CfgOptions(["debug_assertions", "feature=blake2", "feature=ink-debug", "feature=ink_engine", "feature=ink_metadata", "feature=rand", "feature=scale-info", "feature=secp256k1", "feature=sha2", "feature=sha3", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=blake2", "feature=default", "feature=ink-debug", "feature=ink_engine", "feature=ink_metadata", "feature=rand", "feature=scale-info", "feature=secp256k1", "feature=sha2", "feature=sha3", "feature=std", "feature=wee-alloc", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_env-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_env", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_env", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(11), name: CrateName("arrayref"), prelude: true }, Dependency { crate_id: CrateId(33), name: CrateName("blake2"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(105), name: CrateName("ink_allocator"), prelude: true }, Dependency { crate_id: CrateId(106), name: CrateName("ink_engine"), prelude: true }, Dependency { crate_id: CrateId(112), name: CrateName("ink_metadata"), prelude: true }, Dependency { crate_id: CrateId(113), name: CrateName("ink_prelude"), prelude: true }, Dependency { crate_id: CrateId(114), name: CrateName("ink_primitives"), prelude: true }, Dependency { crate_id: CrateId(143), name: CrateName("num_traits"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }, Dependency { crate_id: CrateId(158), name: CrateName("paste"), prelude: true }, Dependency { crate_id: CrateId(178), name: CrateName("rand"), prelude: true }, Dependency { crate_id: CrateId(181), name: CrateName("scale_info"), prelude: true }, Dependency { crate_id: CrateId(183), name: CrateName("secp256k1"), prelude: true }, Dependency { crate_id: CrateId(193), name: CrateName("sha2"), prelude: true }, Dependency { crate_id: CrateId(196), name: CrateName("sha3"), prelude: true }, Dependency { crate_id: CrateId(199), name: CrateName("static_assertions"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(162): CrateData { root_file_id: FileId(164), edition: Edition2018, version: Some("1.0.7"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_doc"), canonical_name: "test_doc" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/paste-1.0.7", "CARGO_PKG_VERSION": "1.0.7", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "paste", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "paste", "CARGO_PKG_VERSION_PATCH": "7", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(158), name: CrateName("paste"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/paste") } }, CrateId(28): CrateData { root_file_id: FileId(28), edition: Edition2021, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("memcpy"), canonical_name: "memcpy" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=atomic", "feature=default", "feature=serde", "feature=std", "feature=testing", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "bitvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "bitvec", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(83), name: CrateName("funty"), prelude: true }, Dependency { crate_id: CrateId(176), name: CrateName("radium"), prelude: true }, Dependency { crate_id: CrateId(234), name: CrateName("tap"), prelude: true }, Dependency { crate_id: CrateId(265), name: CrateName("wyz"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/bitvec") } }, CrateId(217): CrateData { root_file_id: FileId(219), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_ty"), canonical_name: "test_ty" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(83): CrateData { root_file_id: FileId(84), edition: Edition2018, version: Some("2.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("funty"), canonical_name: "funty" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "2", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-2.0.0", "CARGO_PKG_VERSION": "2.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "funty", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "funty", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/myrrlyn/funty") } }, CrateId(138): CrateData { root_file_id: FileId(140), edition: Edition2015, version: Some("0.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("keccak"), canonical_name: "keccak" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=no_unroll", "feature=simd", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/keccak-0.1.2", "CARGO_PKG_VERSION": "0.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "keccak", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "keccak", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/sponges/tree/master/keccak") } }, CrateId(4): CrateData { root_file_id: FileId(4), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("proc_macro"), canonical_name: "proc_macro" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }], proc_macro: [], origin: Lang }, CrateId(193): CrateData { root_file_id: FileId(195), edition: Edition2018, version: Some("0.10.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("sha2"), canonical_name: "sha2" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=asm", "feature=asm-aarch64", "feature=compress", "feature=default", "feature=force-soft", "feature=sha2-asm", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/sha2-0.10.2", "CARGO_PKG_VERSION": "0.10.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "sha2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "sha2", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(50), name: CrateName("cpufeatures"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(59): CrateData { root_file_id: FileId(60), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("boats_display_derive"), canonical_name: "boats_display_derive" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(248): CrateData { root_file_id: FileId(250), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("thiserror_impl"), canonical_name: "thiserror-impl" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-impl-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror_impl", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror-impl", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(114): CrateData { root_file_id: FileId(115), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_primitives"), canonical_name: "ink_primitives" }), cfg_options: CfgOptions(["debug_assertions", "feature=scale-info", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=scale-info", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_primitives-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_primitives", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_primitives", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(113), name: CrateName("ink_prelude"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }, Dependency { crate_id: CrateId(181), name: CrateName("scale_info"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(169): CrateData { root_file_id: FileId(171), edition: Edition2018, version: Some("1.0.39"), display_name: Some(CrateDisplayName { crate_name: CrateName("features"), canonical_name: "features" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=nightly", "feature=proc-macro", "feature=span-locations", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.39", "CARGO_PKG_VERSION": "1.0.39", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "proc_macro2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "proc-macro2", "CARGO_PKG_VERSION_PATCH": "39", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/proc-macro2") } }, CrateId(35): CrateData { root_file_id: FileId(35), edition: Edition2018, version: Some("0.10.4"), display_name: Some(CrateDisplayName { crate_name: CrateName("persona"), canonical_name: "persona" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=reset", "feature=simd", "feature=simd_asm", "feature=simd_opt", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/blake2-0.10.4", "CARGO_PKG_VERSION": "0.10.4", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "blake2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "blake2", "CARGO_PKG_VERSION_PATCH": "4", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(33), name: CrateName("blake2"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(224): CrateData { root_file_id: FileId(226), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_lit"), canonical_name: "test_lit" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(90): CrateData { root_file_id: FileId(91), edition: Edition2015, version: Some("0.14.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("import_name"), canonical_name: "import_name" }), cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "feature=serde", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.14.5", "CARGO_PKG_VERSION": "0.14.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "generic_array", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "generic-array", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "14", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/fizyk20/generic-array.git") } }, CrateId(145): CrateData { root_file_id: FileId(147), edition: Edition2015, version: Some("0.2.15"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "feature=i128", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=i128", "feature=libm", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15", "CARGO_PKG_VERSION": "0.2.15", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "num_traits", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "num-traits", "CARGO_PKG_VERSION_PATCH": "15", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(20), name: CrateName("autocfg"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-num/num-traits") } }, CrateId(11): CrateData { root_file_id: FileId(11), edition: Edition2015, version: Some("0.3.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("arrayref"), canonical_name: "arrayref" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6", "CARGO_PKG_VERSION": "0.3.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayref", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayref", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "3", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/droundy/arrayref") } }, CrateId(200): CrateData { root_file_id: FileId(202), edition: Edition2015, version: Some("2.4.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("subtle"), canonical_name: "subtle" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=i128", "feature=nightly", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "2", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/subtle-2.4.1", "CARGO_PKG_VERSION": "2.4.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "subtle", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "subtle", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "4", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dalek-cryptography/subtle") } }, CrateId(66): CrateData { root_file_id: FileId(67), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("from_str"), canonical_name: "from_str" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(255): CrateData { root_file_id: FileId(257), edition: Edition2018, version: Some("1.15.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("test"), canonical_name: "test" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=force_unix_path_separator", "feature=i128", "feature=no_std", "feature=scale-info", "feature=scale_info", "feature=strict", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.15.0", "CARGO_PKG_VERSION": "1.15.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "typenum", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "typenum", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "15", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paholg/typenum") } }, CrateId(121): CrateData { root_file_id: FileId(123), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("specializations"), canonical_name: "specializations" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(176): CrateData { root_file_id: FileId(178), edition: Edition2018, version: Some("0.7.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("radium"), canonical_name: "radium" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/radium-0.7.0", "CARGO_PKG_VERSION": "0.7.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "radium", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "radium", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "7", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/radium") } }, CrateId(42): CrateData { root_file_id: FileId(42), edition: Edition2018, version: Some("1.0.73"), display_name: Some(CrateDisplayName { crate_name: CrateName("gcc_shim"), canonical_name: "gcc-shim" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=jobserver", "feature=parallel", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.73", "CARGO_PKG_VERSION": "1.0.73", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cc", "CARGO_PKG_VERSION_PATCH": "73", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(41), name: CrateName("cc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/cc-rs") } }, CrateId(231): CrateData { root_file_id: FileId(233), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("file"), canonical_name: "file" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(97): CrateData { root_file_id: FileId(98), edition: Edition2018, version: Some("0.4.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("heck"), canonical_name: "heck" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=unicode", "feature=unicode-segmentation", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/heck-0.4.0", "CARGO_PKG_VERSION": "0.4.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "heck", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "heck", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "4", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/withoutboats/heck") } }, CrateId(152): CrateData { root_file_id: FileId(154), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("max_encoded_len"), canonical_name: "max_encoded_len" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(18): CrateData { root_file_id: FileId(18), edition: Edition2018, version: Some("0.7.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("extend"), canonical_name: "extend" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayvec-0.7.2", "CARGO_PKG_VERSION": "0.7.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayvec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "7", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bluss/arrayvec") } }, CrateId(207): CrateData { root_file_id: FileId(209), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("regression"), canonical_name: "regression" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(73): CrateData { root_file_id: FileId(74), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("not"), canonical_name: "not" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(262): CrateData { root_file_id: FileId(264), edition: Edition2015, version: Some("0.2.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("exhaustive_tests"), canonical_name: "exhaustive_tests" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=bench", "feature=default", "feature=no_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.2.3", "CARGO_PKG_VERSION": "0.2.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "unicode_xid", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "unicode-xid", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(261), name: CrateName("unicode_xid"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/unicode-rs/unicode-xid") } }, CrateId(128): CrateData { root_file_id: FileId(130), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("macros_hygiene"), canonical_name: "macros_hygiene" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(183): CrateData { root_file_id: FileId(185), edition: Edition2015, version: Some("0.22.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("secp256k1"), canonical_name: "secp256k1" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=global-context", "feature=recovery", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=bitcoin-hashes-std", "feature=bitcoin_hashes", "feature=default", "feature=global-context", "feature=global-context-less-secure", "feature=lowmemory", "feature=rand", "feature=rand-std", "feature=recovery", "feature=serde", "feature=std", "feature=unstable", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1", "CARGO_PKG_VERSION": "0.22.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "secp256k1", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "secp256k1", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "22", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(187), name: CrateName("secp256k1_sys"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-bitcoin/rust-secp256k1/") } }, CrateId(49): CrateData { root_file_id: FileId(49), edition: Edition2021, version: Some("3.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("contract"), canonical_name: "contract" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=ink_metadata", "feature=scale-info", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=ink-as-dependency", "feature=ink_metadata", "feature=scale-info", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/Projects/ink-playground/crates/contract", "CARGO_PKG_VERSION": "3.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "contract", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "contract", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(107), name: CrateName("ink_env"), prelude: true }, Dependency { crate_id: CrateId(108), name: CrateName("ink_lang"), prelude: true }, Dependency { crate_id: CrateId(112), name: CrateName("ink_metadata"), prelude: true }, Dependency { crate_id: CrateId(113), name: CrateName("ink_prelude"), prelude: true }, Dependency { crate_id: CrateId(114), name: CrateName("ink_primitives"), prelude: true }, Dependency { crate_id: CrateId(115), name: CrateName("ink_storage"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }, Dependency { crate_id: CrateId(181), name: CrateName("scale_info"), prelude: true }], proc_macro: [], origin: CratesIo { repo: None } }, CrateId(238): CrateData { root_file_id: FileId(240), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_error"), canonical_name: "test_error" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(104): CrateData { root_file_id: FileId(105), edition: Edition2021, version: Some("0.2.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("codegen"), canonical_name: "codegen" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/impl-trait-for-tuples-0.2.2", "CARGO_PKG_VERSION": "0.2.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "impl_trait_for_tuples", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "impl-trait-for-tuples", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bkchr/impl-trait-for-tuples") } }, CrateId(159): CrateData { root_file_id: FileId(161), edition: Edition2018, version: Some("1.0.7"), display_name: Some(CrateDisplayName { crate_name: CrateName("compiletest"), canonical_name: "compiletest" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/paste-1.0.7", "CARGO_PKG_VERSION": "1.0.7", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "paste", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "paste", "CARGO_PKG_VERSION_PATCH": "7", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(158), name: CrateName("paste"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/paste") } }, CrateId(25): CrateData { root_file_id: FileId(25), edition: Edition2015, version: Some("1.1.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("rustflags"), canonical_name: "rustflags" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-1.1.0", "CARGO_PKG_VERSION": "1.1.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "autocfg", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "autocfg", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(20), name: CrateName("autocfg"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/cuviper/autocfg") } }, CrateId(214): CrateData { root_file_id: FileId(216), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_expr"), canonical_name: "test_expr" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(80): CrateData { root_file_id: FileId(81), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("lib"), canonical_name: "lib" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(135): CrateData { root_file_id: FileId(137), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("bench1"), canonical_name: "bench1" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(1): CrateData { root_file_id: FileId(1), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("core"), canonical_name: "core" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [], proc_macro: [], origin: Lang }, CrateId(190): CrateData { root_file_id: FileId(192), edition: Edition2015, version: Some("1.0.137"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=default", "feature=derive", "feature=serde_derive", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=default", "feature=derive", "feature=rc", "feature=serde_derive", "feature=std", "feature=unstable", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.137", "CARGO_PKG_VERSION": "1.0.137", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "serde", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "serde", "CARGO_PKG_VERSION_PATCH": "137", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/serde-rs/serde") } }, CrateId(56): CrateData { root_file_id: FileId(57), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("add"), canonical_name: "add" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(245): CrateData { root_file_id: FileId(247), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_expr"), canonical_name: "test_expr" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(111): CrateData { root_file_id: FileId(112), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_lang_macro"), canonical_name: "ink_lang_macro" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_lang_macro-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_lang_macro", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_lang_macro", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(109), name: CrateName("ink_lang_codegen"), prelude: true }, Dependency { crate_id: CrateId(110), name: CrateName("ink_lang_ir"), prelude: true }, Dependency { crate_id: CrateId(114), name: CrateName("ink_primitives"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(166): CrateData { root_file_id: FileId(168), edition: Edition2018, version: Some("1.0.39"), display_name: Some(CrateDisplayName { crate_name: CrateName("proc_macro2"), canonical_name: "proc-macro2" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=nightly", "feature=proc-macro", "feature=span-locations", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.39", "CARGO_PKG_VERSION": "1.0.39", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "proc_macro2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "proc-macro2", "CARGO_PKG_VERSION_PATCH": "39", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/proc-macro2") } }, CrateId(32): CrateData { root_file_id: FileId(32), edition: Edition2021, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("mut_access"), canonical_name: "mut_access" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=atomic", "feature=default", "feature=serde", "feature=std", "feature=testing", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "bitvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "bitvec", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(83), name: CrateName("funty"), prelude: true }, Dependency { crate_id: CrateId(176), name: CrateName("radium"), prelude: true }, Dependency { crate_id: CrateId(234), name: CrateName("tap"), prelude: true }, Dependency { crate_id: CrateId(265), name: CrateName("wyz"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/bitvec") } }, CrateId(221): CrateData { root_file_id: FileId(223), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_item"), canonical_name: "test_item" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(87): CrateData { root_file_id: FileId(88), edition: Edition2015, version: Some("0.14.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("hex"), canonical_name: "hex" }), cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "feature=serde", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.14.5", "CARGO_PKG_VERSION": "0.14.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "generic_array", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "generic-array", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "14", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/fizyk20/generic-array.git") } }, CrateId(142): CrateData { root_file_id: FileId(144), edition: Edition2015, version: Some("0.2.126"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=align", "feature=const-extern-fn", "feature=default", "feature=extra_traits", "feature=rustc-dep-of-std", "feature=rustc-std-workspace-core", "feature=std", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.126", "CARGO_PKG_VERSION": "0.2.126", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "libc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "libc", "CARGO_PKG_VERSION_PATCH": "126", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-lang/libc") } }, CrateId(8): CrateData { root_file_id: FileId(8), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("test"), canonical_name: "test" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [], proc_macro: [], origin: Lang }, CrateId(197): CrateData { root_file_id: FileId(199), edition: Edition2018, version: Some("0.10.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/sha3-0.10.1", "CARGO_PKG_VERSION": "0.10.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "sha3", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "sha3", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(196), name: CrateName("sha3"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }, Dependency { crate_id: CrateId(138), name: CrateName("keccak"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(63): CrateData { root_file_id: FileId(64), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("display"), canonical_name: "display" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(252): CrateData { root_file_id: FileId(254), edition: Edition2018, version: Some("0.5.9"), display_name: Some(CrateDisplayName { crate_name: CrateName("decode"), canonical_name: "decode" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=indexmap", "feature=preserve_order", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/toml-0.5.9", "CARGO_PKG_VERSION": "0.5.9", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "toml", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "toml", "CARGO_PKG_VERSION_PATCH": "9", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "5", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(249), name: CrateName("toml"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/toml-rs") } }, CrateId(118): CrateData { root_file_id: FileId(120), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("iris"), canonical_name: "iris" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(173): CrateData { root_file_id: FileId(175), edition: Edition2018, version: Some("1.0.18"), display_name: Some(CrateDisplayName { crate_name: CrateName("quote"), canonical_name: "quote" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.18", "CARGO_PKG_VERSION": "1.0.18", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "quote", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "quote", "CARGO_PKG_VERSION_PATCH": "18", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/quote") } }, CrateId(39): CrateData { root_file_id: FileId(39), edition: Edition2018, version: Some("0.10.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2", "CARGO_PKG_VERSION": "0.10.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "block_buffer", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "block-buffer", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(38), name: CrateName("block_buffer"), prelude: true }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/utils") } }, CrateId(228): CrateData { root_file_id: FileId(230), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_derive_input"), canonical_name: "test_derive_input" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(94): CrateData { root_file_id: FileId(95), edition: Edition2018, version: Some("0.2.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("normal"), canonical_name: "normal" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=compiler_builtins", "feature=core", "feature=custom", "feature=js", "feature=js-sys", "feature=rdrand", "feature=rustc-dep-of-std", "feature=std", "feature=test-in-browser", "feature=wasm-bindgen", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.6", "CARGO_PKG_VERSION": "0.2.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "getrandom", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "getrandom", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(92), name: CrateName("getrandom"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(140), name: CrateName("libc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-random/getrandom") } }, CrateId(149): CrateData { root_file_id: FileId(151), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("type_inference"), canonical_name: "type_inference" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(15): CrateData { root_file_id: FileId(15), edition: Edition2018, version: Some("0.7.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("arrayvec"), canonical_name: "arrayvec" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayvec-0.7.2", "CARGO_PKG_VERSION": "0.7.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayvec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "7", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bluss/arrayvec") } }, CrateId(204): CrateData { root_file_id: FileId(206), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_stmt"), canonical_name: "test_stmt" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(70): CrateData { root_file_id: FileId(71), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("into_iterator"), canonical_name: "into_iterator" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(259): CrateData { root_file_id: FileId(261), edition: Edition2018, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("compare"), canonical_name: "compare" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-ident-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "unicode_ident", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "unicode-ident", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/unicode-ident") } }, CrateId(125): CrateData { root_file_id: FileId(127), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("adaptors_no_collect"), canonical_name: "adaptors_no_collect" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(180): CrateData { root_file_id: FileId(182), edition: Edition2018, version: Some("0.6.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("rand_core"), canonical_name: "rand_core" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=getrandom", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=getrandom", "feature=serde", "feature=serde1", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.3", "CARGO_PKG_VERSION": "0.6.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "rand_core", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "rand_core", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "6", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(92), name: CrateName("getrandom"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-random/rand") } }, CrateId(46): CrateData { root_file_id: FileId(46), edition: Edition2018, version: Some("1.0.73"), display_name: Some(CrateDisplayName { crate_name: CrateName("cflags"), canonical_name: "cflags" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=jobserver", "feature=parallel", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.73", "CARGO_PKG_VERSION": "1.0.73", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cc", "CARGO_PKG_VERSION_PATCH": "73", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(41), name: CrateName("cc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/cc-rs") } }, CrateId(235): CrateData { root_file_id: FileId(237), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("thiserror"), canonical_name: "thiserror" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(101): CrateData { root_file_id: FileId(102), edition: Edition2021, version: Some("0.2.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("impl_trait_for_tuples"), canonical_name: "impl-trait-for-tuples" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/impl-trait-for-tuples-0.2.2", "CARGO_PKG_VERSION": "0.2.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "impl_trait_for_tuples", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "impl-trait-for-tuples", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bkchr/impl-trait-for-tuples") } }, CrateId(156): CrateData { root_file_id: FileId(158), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("benches"), canonical_name: "benches" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(22): CrateData { root_file_id: FileId(22), edition: Edition2015, version: Some("1.1.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("paths"), canonical_name: "paths" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-1.1.0", "CARGO_PKG_VERSION": "1.1.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "autocfg", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "autocfg", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(20), name: CrateName("autocfg"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/cuviper/autocfg") } }, CrateId(211): CrateData { root_file_id: FileId(213), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_grouping"), canonical_name: "test_grouping" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(77): CrateData { root_file_id: FileId(78), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("unwrap"), canonical_name: "unwrap" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(132): CrateData { root_file_id: FileId(134), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("fold_specialization"), canonical_name: "fold_specialization" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(187): CrateData { root_file_id: FileId(189), edition: Edition2015, version: Some("0.5.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("secp256k1_sys"), canonical_name: "secp256k1-sys" }), cfg_options: CfgOptions(["debug_assertions", "feature=recovery", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=lowmemory", "feature=recovery", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-sys-0.5.2", "CARGO_PKG_VERSION": "0.5.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "secp256k1_sys", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "secp256k1-sys", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "5", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-bitcoin/rust-secp256k1/") } }, CrateId(53): CrateData { root_file_id: FileId(53), edition: Edition2018, version: Some("0.1.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("crypto_common"), canonical_name: "crypto-common" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=rand_core", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/crypto-common-0.1.3", "CARGO_PKG_VERSION": "0.1.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "crypto_common", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "crypto-common", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/traits") } }, CrateId(242): CrateData { root_file_id: FileId(244), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_display"), canonical_name: "test_display" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(108): CrateData { root_file_id: FileId(109), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_lang"), canonical_name: "ink_lang" }), cfg_options: CfgOptions(["debug_assertions", "feature=ink_metadata", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=ink_metadata", "feature=show-codegen-docs", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_lang-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_lang", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_lang", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(107), name: CrateName("ink_env"), prelude: true }, Dependency { crate_id: CrateId(111), name: CrateName("ink_lang_macro"), prelude: true }, Dependency { crate_id: CrateId(112), name: CrateName("ink_metadata"), prelude: true }, Dependency { crate_id: CrateId(113), name: CrateName("ink_prelude"), prelude: true }, Dependency { crate_id: CrateId(114), name: CrateName("ink_primitives"), prelude: true }, Dependency { crate_id: CrateId(115), name: CrateName("ink_storage"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(163): CrateData { root_file_id: FileId(165), edition: Edition2018, version: Some("1.0.7"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_attr"), canonical_name: "test_attr" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/paste-1.0.7", "CARGO_PKG_VERSION": "1.0.7", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "paste", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "paste", "CARGO_PKG_VERSION_PATCH": "7", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(158), name: CrateName("paste"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/paste") } }, CrateId(29): CrateData { root_file_id: FileId(29), edition: Edition2021, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("iter"), canonical_name: "iter" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=atomic", "feature=default", "feature=serde", "feature=std", "feature=testing", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "bitvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "bitvec", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(83), name: CrateName("funty"), prelude: true }, Dependency { crate_id: CrateId(176), name: CrateName("radium"), prelude: true }, Dependency { crate_id: CrateId(234), name: CrateName("tap"), prelude: true }, Dependency { crate_id: CrateId(265), name: CrateName("wyz"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/bitvec") } }, CrateId(218): CrateData { root_file_id: FileId(220), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_parse_buffer"), canonical_name: "test_parse_buffer" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(84): CrateData { root_file_id: FileId(85), edition: Edition2015, version: Some("0.14.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("generic_array"), canonical_name: "generic_array" }), cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "feature=serde", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.14.5", "CARGO_PKG_VERSION": "0.14.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "generic_array", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "generic-array", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "14", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/fizyk20/generic-array.git") } }, CrateId(139): CrateData { root_file_id: FileId(141), edition: Edition2015, version: Some("0.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=no_unroll", "feature=simd", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/keccak-0.1.2", "CARGO_PKG_VERSION": "0.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "keccak", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "keccak", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(138), name: CrateName("keccak"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/sponges/tree/master/keccak") } }, CrateId(5): CrateData { root_file_id: FileId(5), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("profiler_builtins"), canonical_name: "profiler_builtins" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [], proc_macro: [], origin: Lang }, CrateId(194): CrateData { root_file_id: FileId(196), edition: Edition2018, version: Some("0.10.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=asm", "feature=asm-aarch64", "feature=compress", "feature=default", "feature=force-soft", "feature=sha2-asm", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/sha2-0.10.2", "CARGO_PKG_VERSION": "0.10.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "sha2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "sha2", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(193), name: CrateName("sha2"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(50), name: CrateName("cpufeatures"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(60): CrateData { root_file_id: FileId(61), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("constructor"), canonical_name: "constructor" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(249): CrateData { root_file_id: FileId(251), edition: Edition2018, version: Some("0.5.9"), display_name: Some(CrateDisplayName { crate_name: CrateName("toml"), canonical_name: "toml" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=indexmap", "feature=preserve_order", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/toml-0.5.9", "CARGO_PKG_VERSION": "0.5.9", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "toml", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "toml", "CARGO_PKG_VERSION_PATCH": "9", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "5", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/toml-rs") } }, CrateId(115): CrateData { root_file_id: FileId(117), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_storage"), canonical_name: "ink_storage" }), cfg_options: CfgOptions(["debug_assertions", "feature=ink_metadata", "feature=scale-info", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=ink-fuzz-tests", "feature=ink_metadata", "feature=scale-info", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_storage-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_storage", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_storage", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(10), name: CrateName("array_init"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(107), name: CrateName("ink_env"), prelude: true }, Dependency { crate_id: CrateId(112), name: CrateName("ink_metadata"), prelude: true }, Dependency { crate_id: CrateId(113), name: CrateName("ink_prelude"), prelude: true }, Dependency { crate_id: CrateId(114), name: CrateName("ink_primitives"), prelude: true }, Dependency { crate_id: CrateId(116), name: CrateName("ink_storage_derive"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }, Dependency { crate_id: CrateId(181), name: CrateName("scale_info"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(170): CrateData { root_file_id: FileId(172), edition: Edition2018, version: Some("1.0.39"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_fmt"), canonical_name: "test_fmt" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=nightly", "feature=proc-macro", "feature=span-locations", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.39", "CARGO_PKG_VERSION": "1.0.39", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "proc_macro2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "proc-macro2", "CARGO_PKG_VERSION_PATCH": "39", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/proc-macro2") } }, CrateId(36): CrateData { root_file_id: FileId(36), edition: Edition2018, version: Some("0.10.4"), display_name: Some(CrateDisplayName { crate_name: CrateName("mac"), canonical_name: "mac" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=reset", "feature=simd", "feature=simd_asm", "feature=simd_opt", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/blake2-0.10.4", "CARGO_PKG_VERSION": "0.10.4", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "blake2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "blake2", "CARGO_PKG_VERSION_PATCH": "4", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(33), name: CrateName("blake2"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(225): CrateData { root_file_id: FileId(227), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_visibility"), canonical_name: "test_visibility" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(91): CrateData { root_file_id: FileId(92), edition: Edition2015, version: Some("0.14.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "feature=serde", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.14.5", "CARGO_PKG_VERSION": "0.14.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "generic_array", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "generic-array", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "14", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(264), name: CrateName("version_check"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/fizyk20/generic-array.git") } }, CrateId(146): CrateData { root_file_id: FileId(148), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("parity_scale_codec"), canonical_name: "parity-scale-codec" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(12): CrateData { root_file_id: FileId(12), edition: Edition2015, version: Some("0.3.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("array_refs_with_const"), canonical_name: "array_refs_with_const" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6", "CARGO_PKG_VERSION": "0.3.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayref", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayref", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "3", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(11), name: CrateName("arrayref"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/droundy/arrayref") } }, CrateId(201): CrateData { root_file_id: FileId(203), edition: Edition2015, version: Some("2.4.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=i128", "feature=nightly", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "2", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/subtle-2.4.1", "CARGO_PKG_VERSION": "2.4.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "subtle", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "subtle", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "4", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(200), name: CrateName("subtle"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dalek-cryptography/subtle") } }, CrateId(67): CrateData { root_file_id: FileId(68), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("index_mut"), canonical_name: "index_mut" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(256): CrateData { root_file_id: FileId(258), edition: Edition2018, version: Some("1.15.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_main"), canonical_name: "build-script-main" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=force_unix_path_separator", "feature=i128", "feature=no_std", "feature=scale-info", "feature=scale_info", "feature=strict", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.15.0", "CARGO_PKG_VERSION": "1.15.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "typenum", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "typenum", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "15", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paholg/typenum") } }, CrateId(122): CrateData { root_file_id: FileId(124), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_core"), canonical_name: "test_core" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(177): CrateData { root_file_id: FileId(179), edition: Edition2018, version: Some("0.7.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/radium-0.7.0", "CARGO_PKG_VERSION": "0.7.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "radium", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "radium", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "7", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/radium") } }, CrateId(43): CrateData { root_file_id: FileId(43), edition: Edition2018, version: Some("1.0.73"), display_name: Some(CrateDisplayName { crate_name: CrateName("cc_env"), canonical_name: "cc_env" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=jobserver", "feature=parallel", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.73", "CARGO_PKG_VERSION": "1.0.73", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cc", "CARGO_PKG_VERSION_PATCH": "73", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(41), name: CrateName("cc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/cc-rs") } }, CrateId(232): CrateData { root_file_id: FileId(234), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(98): CrateData { root_file_id: FileId(99), edition: Edition2018, version: Some("0.3.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("impl_serde"), canonical_name: "impl-serde" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/impl-serde-0.3.2", "CARGO_PKG_VERSION": "0.3.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "impl_serde", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "impl-serde", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "3", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: None } }, CrateId(153): CrateData { root_file_id: FileId(155), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("skip"), canonical_name: "skip" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(19): CrateData { root_file_id: FileId(19), edition: Edition2018, version: Some("0.7.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("arraystring"), canonical_name: "arraystring" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayvec-0.7.2", "CARGO_PKG_VERSION": "0.7.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayvec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "7", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bluss/arrayvec") } }, CrateId(208): CrateData { root_file_id: FileId(210), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_generics"), canonical_name: "test_generics" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(74): CrateData { root_file_id: FileId(75), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("sum"), canonical_name: "sum" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(263): CrateData { root_file_id: FileId(265), edition: Edition2015, version: Some("0.2.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("xid"), canonical_name: "xid" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=bench", "feature=default", "feature=no_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.2.3", "CARGO_PKG_VERSION": "0.2.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "unicode_xid", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "unicode-xid", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(261), name: CrateName("unicode_xid"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/unicode-rs/unicode-xid") } }, CrateId(129): CrateData { root_file_id: FileId(131), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("quick"), canonical_name: "quick" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(184): CrateData { root_file_id: FileId(186), edition: Edition2015, version: Some("0.22.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("sign_verify_recovery"), canonical_name: "sign_verify_recovery" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=global-context", "feature=recovery", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=bitcoin-hashes-std", "feature=bitcoin_hashes", "feature=default", "feature=global-context", "feature=global-context-less-secure", "feature=lowmemory", "feature=rand", "feature=rand-std", "feature=recovery", "feature=serde", "feature=std", "feature=unstable", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1", "CARGO_PKG_VERSION": "0.22.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "secp256k1", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "secp256k1", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "22", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(183), name: CrateName("secp256k1"), prelude: true }, Dependency { crate_id: CrateId(187), name: CrateName("secp256k1_sys"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-bitcoin/rust-secp256k1/") } }, CrateId(50): CrateData { root_file_id: FileId(50), edition: Edition2018, version: Some("0.2.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("cpufeatures"), canonical_name: "cpufeatures" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cpufeatures-0.2.2", "CARGO_PKG_VERSION": "0.2.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cpufeatures", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cpufeatures", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/utils") } }, CrateId(239): CrateData { root_file_id: FileId(241), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_from"), canonical_name: "test_from" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(105): CrateData { root_file_id: FileId(106), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_allocator"), canonical_name: "ink_allocator" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=ink-fuzz-tests", "feature=std", "feature=wee-alloc", "feature=wee_alloc", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_allocator-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_allocator", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_allocator", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(160): CrateData { root_file_id: FileId(162), edition: Edition2018, version: Some("1.0.7"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_item"), canonical_name: "test_item" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/paste-1.0.7", "CARGO_PKG_VERSION": "1.0.7", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "paste", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "paste", "CARGO_PKG_VERSION_PATCH": "7", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(158), name: CrateName("paste"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/paste") } }, CrateId(26): CrateData { root_file_id: FileId(26), edition: Edition2021, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("bitvec"), canonical_name: "bitvec" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=atomic", "feature=default", "feature=serde", "feature=std", "feature=testing", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "bitvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "bitvec", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(83), name: CrateName("funty"), prelude: true }, Dependency { crate_id: CrateId(176), name: CrateName("radium"), prelude: true }, Dependency { crate_id: CrateId(234), name: CrateName("tap"), prelude: true }, Dependency { crate_id: CrateId(265), name: CrateName("wyz"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/bitvec") } }, CrateId(215): CrateData { root_file_id: FileId(217), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_parse_stream"), canonical_name: "test_parse_stream" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(81): CrateData { root_file_id: FileId(82), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("digest"), canonical_name: "digest" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=block-buffer", "feature=core-api", "feature=default", "feature=mac", "feature=std", "feature=subtle", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=blobby", "feature=block-buffer", "feature=core-api", "feature=default", "feature=dev", "feature=mac", "feature=rand_core", "feature=std", "feature=subtle", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "digest", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "digest", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(38), name: CrateName("block_buffer"), prelude: true }, Dependency { crate_id: CrateId(53), name: CrateName("crypto_common"), prelude: true }, Dependency { crate_id: CrateId(200), name: CrateName("subtle"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/traits") } }, CrateId(136): CrateData { root_file_id: FileId(138), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("combinations"), canonical_name: "combinations" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(2): CrateData { root_file_id: FileId(2), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("panic_abort"), canonical_name: "panic_abort" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [], proc_macro: [], origin: Lang }, CrateId(191): CrateData { root_file_id: FileId(193), edition: Edition2015, version: Some("1.0.137"), display_name: Some(CrateDisplayName { crate_name: CrateName("serde_derive"), canonical_name: "serde_derive" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=deserialize_in_place", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.137", "CARGO_PKG_VERSION": "1.0.137", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "serde_derive", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "serde_derive", "CARGO_PKG_VERSION_PATCH": "137", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/serde-rs/serde") } }, CrateId(57): CrateData { root_file_id: FileId(58), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("as_mut"), canonical_name: "as_mut" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(246): CrateData { root_file_id: FileId(248), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_option"), canonical_name: "test_option" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(112): CrateData { root_file_id: FileId(113), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_metadata"), canonical_name: "ink_metadata" }), cfg_options: CfgOptions(["debug_assertions", "feature=derive", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=derive", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_metadata-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_metadata", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_metadata", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(98), name: CrateName("impl_serde"), prelude: true }, Dependency { crate_id: CrateId(113), name: CrateName("ink_prelude"), prelude: true }, Dependency { crate_id: CrateId(114), name: CrateName("ink_primitives"), prelude: true }, Dependency { crate_id: CrateId(181), name: CrateName("scale_info"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(167): CrateData { root_file_id: FileId(169), edition: Edition2018, version: Some("1.0.39"), display_name: Some(CrateDisplayName { crate_name: CrateName("marker"), canonical_name: "marker" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=nightly", "feature=proc-macro", "feature=span-locations", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.39", "CARGO_PKG_VERSION": "1.0.39", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "proc_macro2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "proc-macro2", "CARGO_PKG_VERSION_PATCH": "39", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/proc-macro2") } }, CrateId(33): CrateData { root_file_id: FileId(33), edition: Edition2018, version: Some("0.10.4"), display_name: Some(CrateDisplayName { crate_name: CrateName("blake2"), canonical_name: "blake2" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=reset", "feature=simd", "feature=simd_asm", "feature=simd_opt", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/blake2-0.10.4", "CARGO_PKG_VERSION": "0.10.4", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "blake2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "blake2", "CARGO_PKG_VERSION_PATCH": "4", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(222): CrateData { root_file_id: FileId(224), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_ident"), canonical_name: "test_ident" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(88): CrateData { root_file_id: FileId(89), edition: Edition2015, version: Some("0.14.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("arr"), canonical_name: "arr" }), cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "feature=serde", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.14.5", "CARGO_PKG_VERSION": "0.14.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "generic_array", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "generic-array", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "14", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/fizyk20/generic-array.git") } }, CrateId(143): CrateData { root_file_id: FileId(145), edition: Edition2015, version: Some("0.2.15"), display_name: Some(CrateDisplayName { crate_name: CrateName("num_traits"), canonical_name: "num-traits" }), cfg_options: CfgOptions(["debug_assertions", "feature=i128", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=i128", "feature=libm", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15", "CARGO_PKG_VERSION": "0.2.15", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "num_traits", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "num-traits", "CARGO_PKG_VERSION_PATCH": "15", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-num/num-traits") } }, CrateId(9): CrateData { root_file_id: FileId(9), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("unwind"), canonical_name: "unwind" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [], proc_macro: [], origin: Lang }, CrateId(198): CrateData { root_file_id: FileId(200), edition: Edition2018, version: Some("0.10.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/sha3-0.10.1", "CARGO_PKG_VERSION": "0.10.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "sha3", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "sha3", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(196), name: CrateName("sha3"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }, Dependency { crate_id: CrateId(138), name: CrateName("keccak"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(64): CrateData { root_file_id: FileId(65), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("error"), canonical_name: "error" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(253): CrateData { root_file_id: FileId(255), edition: Edition2018, version: Some("0.5.9"), display_name: Some(CrateDisplayName { crate_name: CrateName("enum_external_deserialize"), canonical_name: "enum_external_deserialize" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=indexmap", "feature=preserve_order", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/toml-0.5.9", "CARGO_PKG_VERSION": "0.5.9", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "toml", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "toml", "CARGO_PKG_VERSION_PATCH": "9", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "5", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(249), name: CrateName("toml"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/toml-rs") } }, CrateId(119): CrateData { root_file_id: FileId(121), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("flatten_ok"), canonical_name: "flatten_ok" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(174): CrateData { root_file_id: FileId(176), edition: Edition2018, version: Some("1.0.18"), display_name: Some(CrateDisplayName { crate_name: CrateName("compiletest"), canonical_name: "compiletest" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.18", "CARGO_PKG_VERSION": "1.0.18", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "quote", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "quote", "CARGO_PKG_VERSION_PATCH": "18", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/quote") } }, CrateId(40): CrateData { root_file_id: FileId(40), edition: Edition2018, version: Some("1.2.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("byte_slice_cast"), canonical_name: "byte-slice-cast" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-1.2.1", "CARGO_PKG_VERSION": "1.2.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "byte_slice_cast", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "byte-slice-cast", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/sdroege/bytes-num-slice-cast") } }, CrateId(229): CrateData { root_file_id: FileId(231), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_pat"), canonical_name: "test_pat" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(95): CrateData { root_file_id: FileId(96), edition: Edition2018, version: Some("0.2.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("custom"), canonical_name: "custom" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=compiler_builtins", "feature=core", "feature=custom", "feature=js", "feature=js-sys", "feature=rdrand", "feature=rustc-dep-of-std", "feature=std", "feature=test-in-browser", "feature=wasm-bindgen", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.6", "CARGO_PKG_VERSION": "0.2.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "getrandom", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "getrandom", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(92), name: CrateName("getrandom"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(140), name: CrateName("libc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-random/getrandom") } }, CrateId(150): CrateData { root_file_id: FileId(152), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("scale_codec_ui"), canonical_name: "scale_codec_ui" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(16): CrateData { root_file_id: FileId(16), edition: Edition2018, version: Some("0.7.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("serde"), canonical_name: "serde" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayvec-0.7.2", "CARGO_PKG_VERSION": "0.7.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayvec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "7", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bluss/arrayvec") } }, CrateId(205): CrateData { root_file_id: FileId(207), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_attribute"), canonical_name: "test_attribute" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(71): CrateData { root_file_id: FileId(72), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("mul_assign"), canonical_name: "mul_assign" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(260): CrateData { root_file_id: FileId(262), edition: Edition2018, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("xid"), canonical_name: "xid" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-ident-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "unicode_ident", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "unicode-ident", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/unicode-ident") } }, CrateId(126): CrateData { root_file_id: FileId(128), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("peeking_take_while"), canonical_name: "peeking_take_while" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(181): CrateData { root_file_id: FileId(183), edition: Edition2021, version: Some("2.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("scale_info"), canonical_name: "scale-info" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=decode", "feature=derive", "feature=scale-info-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=bit-vec", "feature=bitvec", "feature=decode", "feature=default", "feature=derive", "feature=docs", "feature=scale-info-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "2", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-2.1.2", "CARGO_PKG_VERSION": "2.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "scale_info", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "scale-info", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }, Dependency { crate_id: CrateId(182), name: CrateName("scale_info_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/scale-info") } }, CrateId(47): CrateData { root_file_id: FileId(47), edition: Edition2018, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("cfg_if"), canonical_name: "cfg-if" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=compiler_builtins", "feature=core", "feature=rustc-dep-of-std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cfg-if-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cfg_if", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cfg-if", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/cfg-if") } }, CrateId(236): CrateData { root_file_id: FileId(238), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_lints"), canonical_name: "test_lints" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(102): CrateData { root_file_id: FileId(103), edition: Edition2021, version: Some("0.2.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("fail"), canonical_name: "fail" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/impl-trait-for-tuples-0.2.2", "CARGO_PKG_VERSION": "0.2.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "impl_trait_for_tuples", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "impl-trait-for-tuples", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bkchr/impl-trait-for-tuples") } }, CrateId(157): CrateData { root_file_id: FileId(159), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("parity_scale_codec_derive"), canonical_name: "parity-scale-codec-derive" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=max-encoded-len", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-derive-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec_derive", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec-derive", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(165), name: CrateName("proc_macro_crate"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: None } }, CrateId(23): CrateData { root_file_id: FileId(23), edition: Edition2015, version: Some("1.1.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("integers"), canonical_name: "integers" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-1.1.0", "CARGO_PKG_VERSION": "1.1.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "autocfg", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "autocfg", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(20), name: CrateName("autocfg"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/cuviper/autocfg") } }, CrateId(212): CrateData { root_file_id: FileId(214), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_receiver"), canonical_name: "test_receiver" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(78): CrateData { root_file_id: FileId(79), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("no_std"), canonical_name: "no_std" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(133): CrateData { root_file_id: FileId(135), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("combinations_with_replacement"), canonical_name: "combinations_with_replacement" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(188): CrateData { root_file_id: FileId(190), edition: Edition2015, version: Some("0.5.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "feature=recovery", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=lowmemory", "feature=recovery", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-sys-0.5.2", "CARGO_PKG_VERSION": "0.5.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "secp256k1_sys", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "secp256k1-sys", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "5", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(41), name: CrateName("cc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-bitcoin/rust-secp256k1/") } }, CrateId(54): CrateData { root_file_id: FileId(54), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("derive_more"), canonical_name: "derive_more" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(243): CrateData { root_file_id: FileId(245), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_generics"), canonical_name: "test_generics" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(109): CrateData { root_file_id: FileId(110), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_lang_codegen"), canonical_name: "ink_lang_codegen" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_lang_codegen-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_lang_codegen", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_lang_codegen", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(33), name: CrateName("blake2"), prelude: true }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }, Dependency { crate_id: CrateId(97), name: CrateName("heck"), prelude: true }, Dependency { crate_id: CrateId(98), name: CrateName("impl_serde"), prelude: true }, Dependency { crate_id: CrateId(110), name: CrateName("ir"), prelude: true }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(164): CrateData { root_file_id: FileId(166), edition: Edition2018, version: Some("0.2.16"), display_name: Some(CrateDisplayName { crate_name: CrateName("ppv_lite86"), canonical_name: "ppv-lite86" }), cfg_options: CfgOptions(["debug_assertions", "feature=simd", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=no_simd", "feature=simd", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ppv-lite86-0.2.16", "CARGO_PKG_VERSION": "0.2.16", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ppv_lite86", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ppv-lite86", "CARGO_PKG_VERSION_PATCH": "16", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/cryptocorrosion/cryptocorrosion") } }, CrateId(30): CrateData { root_file_id: FileId(30), edition: Edition2021, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("macros"), canonical_name: "macros" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=atomic", "feature=default", "feature=serde", "feature=std", "feature=testing", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "bitvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "bitvec", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(83), name: CrateName("funty"), prelude: true }, Dependency { crate_id: CrateId(176), name: CrateName("radium"), prelude: true }, Dependency { crate_id: CrateId(234), name: CrateName("tap"), prelude: true }, Dependency { crate_id: CrateId(265), name: CrateName("wyz"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/bitvec") } }, CrateId(219): CrateData { root_file_id: FileId(221), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_should_parse"), canonical_name: "test_should_parse" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(85): CrateData { root_file_id: FileId(86), edition: Edition2015, version: Some("0.14.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "feature=serde", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.14.5", "CARGO_PKG_VERSION": "0.14.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "generic_array", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "generic-array", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "14", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/fizyk20/generic-array.git") } }, CrateId(140): CrateData { root_file_id: FileId(142), edition: Edition2015, version: Some("0.2.126"), display_name: Some(CrateDisplayName { crate_name: CrateName("libc"), canonical_name: "libc" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=align", "feature=const-extern-fn", "feature=default", "feature=extra_traits", "feature=rustc-dep-of-std", "feature=rustc-std-workspace-core", "feature=std", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.126", "CARGO_PKG_VERSION": "0.2.126", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "libc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "libc", "CARGO_PKG_VERSION_PATCH": "126", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-lang/libc") } }, CrateId(6): CrateData { root_file_id: FileId(6), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("std"), canonical_name: "std" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(2), name: CrateName("panic_abort"), prelude: true }, Dependency { crate_id: CrateId(3), name: CrateName("panic_unwind"), prelude: true }, Dependency { crate_id: CrateId(5), name: CrateName("profiler_builtins"), prelude: true }, Dependency { crate_id: CrateId(7), name: CrateName("std_detect"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: true }, Dependency { crate_id: CrateId(9), name: CrateName("unwind"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }], proc_macro: [], origin: Lang }, CrateId(195): CrateData { root_file_id: FileId(197), edition: Edition2018, version: Some("0.10.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=asm", "feature=asm-aarch64", "feature=compress", "feature=default", "feature=force-soft", "feature=sha2-asm", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/sha2-0.10.2", "CARGO_PKG_VERSION": "0.10.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "sha2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "sha2", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(193), name: CrateName("sha2"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(50), name: CrateName("cpufeatures"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(61): CrateData { root_file_id: FileId(62), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("deref"), canonical_name: "deref" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(250): CrateData { root_file_id: FileId(252), edition: Edition2018, version: Some("0.5.9"), display_name: Some(CrateDisplayName { crate_name: CrateName("enum_external"), canonical_name: "enum_external" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=indexmap", "feature=preserve_order", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/toml-0.5.9", "CARGO_PKG_VERSION": "0.5.9", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "toml", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "toml", "CARGO_PKG_VERSION_PATCH": "9", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "5", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(249), name: CrateName("toml"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/toml-rs") } }, CrateId(116): CrateData { root_file_id: FileId(118), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_storage_derive"), canonical_name: "ink_storage_derive" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_storage_derive-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_storage_derive", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_storage_derive", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(233), name: CrateName("synstructure"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(171): CrateData { root_file_id: FileId(173), edition: Edition2018, version: Some("1.0.39"), display_name: Some(CrateDisplayName { crate_name: CrateName("comments"), canonical_name: "comments" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=nightly", "feature=proc-macro", "feature=span-locations", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.39", "CARGO_PKG_VERSION": "1.0.39", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "proc_macro2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "proc-macro2", "CARGO_PKG_VERSION_PATCH": "39", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/proc-macro2") } }, CrateId(37): CrateData { root_file_id: FileId(37), edition: Edition2018, version: Some("0.10.4"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=reset", "feature=simd", "feature=simd_asm", "feature=simd_opt", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/blake2-0.10.4", "CARGO_PKG_VERSION": "0.10.4", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "blake2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "blake2", "CARGO_PKG_VERSION_PATCH": "4", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(33), name: CrateName("blake2"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(226): CrateData { root_file_id: FileId(228), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_size"), canonical_name: "test_size" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(92): CrateData { root_file_id: FileId(93), edition: Edition2018, version: Some("0.2.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("getrandom"), canonical_name: "getrandom" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=compiler_builtins", "feature=core", "feature=custom", "feature=js", "feature=js-sys", "feature=rdrand", "feature=rustc-dep-of-std", "feature=std", "feature=test-in-browser", "feature=wasm-bindgen", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.6", "CARGO_PKG_VERSION": "0.2.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "getrandom", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "getrandom", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(140), name: CrateName("libc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-random/getrandom") } }, CrateId(147): CrateData { root_file_id: FileId(149), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(13): CrateData { root_file_id: FileId(13), edition: Edition2015, version: Some("0.3.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("array_refs"), canonical_name: "array_refs" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayref-0.3.6", "CARGO_PKG_VERSION": "0.3.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayref", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayref", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "3", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(11), name: CrateName("arrayref"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/droundy/arrayref") } }, CrateId(202): CrateData { root_file_id: FileId(204), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("syn"), canonical_name: "syn" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(68): CrateData { root_file_id: FileId(69), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("index"), canonical_name: "index" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(257): CrateData { root_file_id: FileId(259), edition: Edition2018, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("unicode_ident"), canonical_name: "unicode-ident" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-ident-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "unicode_ident", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "unicode-ident", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/unicode-ident") } }, CrateId(123): CrateData { root_file_id: FileId(125), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_std"), canonical_name: "test_std" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(178): CrateData { root_file_id: FileId(180), edition: Edition2018, version: Some("0.8.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("rand"), canonical_name: "rand" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=default", "feature=getrandom", "feature=libc", "feature=rand_chacha", "feature=std", "feature=std_rng", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=default", "feature=getrandom", "feature=libc", "feature=log", "feature=min_const_gen", "feature=nightly", "feature=packed_simd", "feature=rand_chacha", "feature=serde", "feature=serde1", "feature=simd_support", "feature=small_rng", "feature=std", "feature=std_rng", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.5", "CARGO_PKG_VERSION": "0.8.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "rand", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "rand", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "8", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(140), name: CrateName("libc"), prelude: true }, Dependency { crate_id: CrateId(179), name: CrateName("rand_chacha"), prelude: true }, Dependency { crate_id: CrateId(180), name: CrateName("rand_core"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-random/rand") } }, CrateId(44): CrateData { root_file_id: FileId(44), edition: Edition2018, version: Some("1.0.73"), display_name: Some(CrateDisplayName { crate_name: CrateName("cxxflags"), canonical_name: "cxxflags" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=jobserver", "feature=parallel", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.73", "CARGO_PKG_VERSION": "1.0.73", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cc", "CARGO_PKG_VERSION_PATCH": "73", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(41), name: CrateName("cc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/cc-rs") } }, CrateId(233): CrateData { root_file_id: FileId(235), edition: Edition2018, version: Some("0.12.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("synstructure"), canonical_name: "synstructure" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.6", "CARGO_PKG_VERSION": "0.12.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "synstructure", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "synstructure", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "12", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(261), name: CrateName("unicode_xid"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/mystor/synstructure") } }, CrateId(99): CrateData { root_file_id: FileId(100), edition: Edition2018, version: Some("0.3.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("impl_serde"), canonical_name: "impl_serde" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/impl-serde-0.3.2", "CARGO_PKG_VERSION": "0.3.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "impl_serde", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "impl-serde", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "3", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(98), name: CrateName("impl_serde"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: None } }, CrateId(154): CrateData { root_file_id: FileId(156), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("max_encoded_len_ui"), canonical_name: "max_encoded_len_ui" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(20): CrateData { root_file_id: FileId(20), edition: Edition2015, version: Some("1.1.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("autocfg"), canonical_name: "autocfg" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-1.1.0", "CARGO_PKG_VERSION": "1.1.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "autocfg", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "autocfg", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/cuviper/autocfg") } }, CrateId(209): CrateData { root_file_id: FileId(211), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("zzz_stable"), canonical_name: "zzz_stable" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(75): CrateData { root_file_id: FileId(76), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("try_into"), canonical_name: "try_into" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(264): CrateData { root_file_id: FileId(266), edition: Edition2015, version: Some("0.9.4"), display_name: Some(CrateDisplayName { crate_name: CrateName("version_check"), canonical_name: "version_check" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/version_check-0.9.4", "CARGO_PKG_VERSION": "0.9.4", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "version_check", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "version_check", "CARGO_PKG_VERSION_PATCH": "4", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "9", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/SergioBenitez/version_check") } }, CrateId(130): CrateData { root_file_id: FileId(132), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("tuple_combinations"), canonical_name: "tuple_combinations" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(185): CrateData { root_file_id: FileId(187), edition: Edition2015, version: Some("0.22.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("sign_verify"), canonical_name: "sign_verify" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=global-context", "feature=recovery", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=bitcoin-hashes-std", "feature=bitcoin_hashes", "feature=default", "feature=global-context", "feature=global-context-less-secure", "feature=lowmemory", "feature=rand", "feature=rand-std", "feature=recovery", "feature=serde", "feature=std", "feature=unstable", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/secp256k1-0.22.1", "CARGO_PKG_VERSION": "0.22.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "secp256k1", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "secp256k1", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "22", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(183), name: CrateName("secp256k1"), prelude: true }, Dependency { crate_id: CrateId(187), name: CrateName("secp256k1_sys"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-bitcoin/rust-secp256k1/") } }, CrateId(51): CrateData { root_file_id: FileId(51), edition: Edition2018, version: Some("0.2.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("aarch64"), canonical_name: "aarch64" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cpufeatures-0.2.2", "CARGO_PKG_VERSION": "0.2.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cpufeatures", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cpufeatures", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(50), name: CrateName("cpufeatures"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/utils") } }, CrateId(240): CrateData { root_file_id: FileId(242), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("compiletest"), canonical_name: "compiletest" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(106): CrateData { root_file_id: FileId(107), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_engine"), canonical_name: "ink_engine" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=secp256k1", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=secp256k1", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_engine-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_engine", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_engine", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(33), name: CrateName("blake2"), prelude: true }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(146), name: CrateName("scale"), prelude: true }, Dependency { crate_id: CrateId(178), name: CrateName("rand"), prelude: true }, Dependency { crate_id: CrateId(183), name: CrateName("secp256k1"), prelude: true }, Dependency { crate_id: CrateId(193), name: CrateName("sha2"), prelude: true }, Dependency { crate_id: CrateId(196), name: CrateName("sha3"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(161): CrateData { root_file_id: FileId(163), edition: Edition2018, version: Some("1.0.7"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_expr"), canonical_name: "test_expr" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/paste-1.0.7", "CARGO_PKG_VERSION": "1.0.7", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "paste", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "paste", "CARGO_PKG_VERSION_PATCH": "7", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(158), name: CrateName("paste"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/paste") } }, CrateId(27): CrateData { root_file_id: FileId(27), edition: Edition2021, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("slice"), canonical_name: "slice" }), cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=alloc", "feature=atomic", "feature=default", "feature=serde", "feature=std", "feature=testing", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "bitvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "bitvec", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(83), name: CrateName("funty"), prelude: true }, Dependency { crate_id: CrateId(176), name: CrateName("radium"), prelude: true }, Dependency { crate_id: CrateId(234), name: CrateName("tap"), prelude: true }, Dependency { crate_id: CrateId(265), name: CrateName("wyz"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bitvecto-rs/bitvec") } }, CrateId(216): CrateData { root_file_id: FileId(218), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_iterators"), canonical_name: "test_iterators" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(82): CrateData { root_file_id: FileId(83), edition: Edition2015, version: Some("1.6.1"), display_name: Some(CrateDisplayName { crate_name: CrateName("either"), canonical_name: "either" }), cfg_options: CfgOptions(["debug_assertions", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=serde", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1", "CARGO_PKG_VERSION": "1.6.1", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "either", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "either", "CARGO_PKG_VERSION_PATCH": "1", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "6", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bluss/either") } }, CrateId(137): CrateData { root_file_id: FileId(139), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("powerset"), canonical_name: "powerset" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(3): CrateData { root_file_id: FileId(3), edition: Edition2018, version: None, display_name: Some(CrateDisplayName { crate_name: CrateName("panic_unwind"), canonical_name: "panic_unwind" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "unix"]), env: Env { entries: {} }, dependencies: [], proc_macro: [], origin: Lang }, CrateId(192): CrateData { root_file_id: FileId(194), edition: Edition2015, version: Some("1.0.137"), display_name: Some(CrateDisplayName { crate_name: CrateName("build_script_build"), canonical_name: "build-script-build" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=deserialize_in_place", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.137", "CARGO_PKG_VERSION": "1.0.137", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "serde_derive", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "serde_derive", "CARGO_PKG_VERSION_PATCH": "137", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/serde-rs/serde") } }, CrateId(58): CrateData { root_file_id: FileId(59), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("as_ref"), canonical_name: "as_ref" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(247): CrateData { root_file_id: FileId(249), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_source"), canonical_name: "test_source" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(113): CrateData { root_file_id: FileId(114), edition: Edition2021, version: Some("3.2.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("ink_prelude"), canonical_name: "ink_prelude" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ink_prelude-3.2.0", "CARGO_PKG_VERSION": "3.2.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "ink_prelude", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "ink_prelude", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/ink") } }, CrateId(168): CrateData { root_file_id: FileId(170), edition: Edition2018, version: Some("1.0.39"), display_name: Some(CrateDisplayName { crate_name: CrateName("test"), canonical_name: "test" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=nightly", "feature=proc-macro", "feature=span-locations", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.39", "CARGO_PKG_VERSION": "1.0.39", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "proc_macro2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "proc-macro2", "CARGO_PKG_VERSION_PATCH": "39", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/proc-macro2") } }, CrateId(34): CrateData { root_file_id: FileId(34), edition: Edition2018, version: Some("0.10.4"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=reset", "feature=simd", "feature=simd_asm", "feature=simd_opt", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/blake2-0.10.4", "CARGO_PKG_VERSION": "0.10.4", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "blake2", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "blake2", "CARGO_PKG_VERSION_PATCH": "4", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(33), name: CrateName("blake2"), prelude: true }, Dependency { crate_id: CrateId(81), name: CrateName("digest"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/RustCrypto/hashes") } }, CrateId(223): CrateData { root_file_id: FileId(225), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_precedence"), canonical_name: "test_precedence" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(89): CrateData { root_file_id: FileId(90), edition: Edition2015, version: Some("0.14.5"), display_name: Some(CrateDisplayName { crate_name: CrateName("generics"), canonical_name: "generics" }), cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=more_lengths", "feature=serde", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/generic-array-0.14.5", "CARGO_PKG_VERSION": "0.14.5", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "generic_array", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "generic-array", "CARGO_PKG_VERSION_PATCH": "5", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "14", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(84), name: CrateName("generic_array"), prelude: true }, Dependency { crate_id: CrateId(254), name: CrateName("typenum"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/fizyk20/generic-array.git") } }, CrateId(144): CrateData { root_file_id: FileId(146), edition: Edition2015, version: Some("0.2.15"), display_name: Some(CrateDisplayName { crate_name: CrateName("cast"), canonical_name: "cast" }), cfg_options: CfgOptions(["debug_assertions", "feature=i128", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=i128", "feature=libm", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15", "CARGO_PKG_VERSION": "0.2.15", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "num_traits", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "num-traits", "CARGO_PKG_VERSION_PATCH": "15", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(143), name: CrateName("num_traits"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-num/num-traits") } }, CrateId(10): CrateData { root_file_id: FileId(10), edition: Edition2018, version: Some("2.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("array_init"), canonical_name: "array-init" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "2", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/array-init-2.0.0", "CARGO_PKG_VERSION": "2.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "array_init", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "array-init", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/Manishearth/array-init/") } }, CrateId(199): CrateData { root_file_id: FileId(201), edition: Edition2015, version: Some("1.1.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("static_assertions"), canonical_name: "static_assertions" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=nightly", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0", "CARGO_PKG_VERSION": "1.1.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "static_assertions", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "static_assertions", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/nvzqz/static-assertions-rs") } }, CrateId(65): CrateData { root_file_id: FileId(66), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("from"), canonical_name: "from" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(254): CrateData { root_file_id: FileId(256), edition: Edition2018, version: Some("1.15.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("typenum"), canonical_name: "typenum" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=force_unix_path_separator", "feature=i128", "feature=no_std", "feature=scale-info", "feature=scale_info", "feature=strict", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.15.0", "CARGO_PKG_VERSION": "1.15.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "typenum", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "typenum", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "15", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paholg/typenum") } }, CrateId(120): CrateData { root_file_id: FileId(122), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("tuples"), canonical_name: "tuples" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(175): CrateData { root_file_id: FileId(177), edition: Edition2018, version: Some("1.0.18"), display_name: Some(CrateDisplayName { crate_name: CrateName("test"), canonical_name: "test" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=proc-macro", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.18", "CARGO_PKG_VERSION": "1.0.18", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "quote", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "quote", "CARGO_PKG_VERSION_PATCH": "18", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/quote") } }, CrateId(41): CrateData { root_file_id: FileId(41), edition: Edition2018, version: Some("1.0.73"), display_name: Some(CrateDisplayName { crate_name: CrateName("cc"), canonical_name: "cc" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=jobserver", "feature=parallel", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.73", "CARGO_PKG_VERSION": "1.0.73", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cc", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cc", "CARGO_PKG_VERSION_PATCH": "73", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/cc-rs") } }, CrateId(230): CrateData { root_file_id: FileId(232), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("rust"), canonical_name: "rust" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(96): CrateData { root_file_id: FileId(97), edition: Edition2018, version: Some("0.2.6"), display_name: Some(CrateDisplayName { crate_name: CrateName("mod"), canonical_name: "mod" }), cfg_options: CfgOptions(["debug_assertions", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=compiler_builtins", "feature=core", "feature=custom", "feature=js", "feature=js-sys", "feature=rdrand", "feature=rustc-dep-of-std", "feature=std", "feature=test-in-browser", "feature=wasm-bindgen", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.6", "CARGO_PKG_VERSION": "0.2.6", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "getrandom", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "getrandom", "CARGO_PKG_VERSION_PATCH": "6", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(92), name: CrateName("getrandom"), prelude: true }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }, Dependency { crate_id: CrateId(140), name: CrateName("libc"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-random/getrandom") } }, CrateId(151): CrateData { root_file_id: FileId(153), edition: Edition2021, version: Some("3.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("single_field_struct_encoding"), canonical_name: "single_field_struct_encoding" }), cfg_options: CfgOptions(["debug_assertions", "feature=bitvec", "feature=chain-error", "feature=derive", "feature=full", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=arbitrary", "feature=bit-vec", "feature=bitvec", "feature=bytes", "feature=chain-error", "feature=default", "feature=derive", "feature=full", "feature=fuzz", "feature=generic-array", "feature=max-encoded-len", "feature=parity-scale-codec-derive", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "3", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-3.1.2", "CARGO_PKG_VERSION": "3.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "parity_scale_codec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "parity-scale-codec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(146), name: CrateName("parity_scale_codec"), prelude: true }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }, Dependency { crate_id: CrateId(26), name: CrateName("bitvec"), prelude: true }, Dependency { crate_id: CrateId(40), name: CrateName("byte_slice_cast"), prelude: true }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(157), name: CrateName("parity_scale_codec_derive"), prelude: true }, Dependency { crate_id: CrateId(189), name: CrateName("serde"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/parity-scale-codec") } }, CrateId(17): CrateData { root_file_id: FileId(17), edition: Edition2018, version: Some("0.7.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("tests"), canonical_name: "tests" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=serde", "feature=std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayvec-0.7.2", "CARGO_PKG_VERSION": "0.7.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "arrayvec", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "arrayvec", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "7", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(15), name: CrateName("arrayvec"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bluss/arrayvec") } }, CrateId(206): CrateData { root_file_id: FileId(208), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_path"), canonical_name: "test_path" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(72): CrateData { root_file_id: FileId(73), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("mul"), canonical_name: "mul" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(261): CrateData { root_file_id: FileId(263), edition: Edition2015, version: Some("0.2.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("unicode_xid"), canonical_name: "unicode-xid" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=bench", "feature=default", "feature=no_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.2.3", "CARGO_PKG_VERSION": "0.2.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "unicode_xid", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "unicode-xid", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/unicode-rs/unicode-xid") } }, CrateId(127): CrateData { root_file_id: FileId(129), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("merge_join"), canonical_name: "merge_join" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }, CrateId(182): CrateData { root_file_id: FileId(184), edition: Edition2021, version: Some("2.1.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("scale_info_derive"), canonical_name: "scale-info-derive" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=docs", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "2", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-derive-2.1.2", "CARGO_PKG_VERSION": "2.1.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "scale_info_derive", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "scale-info-derive", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(165), name: CrateName("proc_macro_crate"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/paritytech/scale-info") } }, CrateId(48): CrateData { root_file_id: FileId(48), edition: Edition2018, version: Some("1.0.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("xcrate"), canonical_name: "xcrate" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=compiler_builtins", "feature=core", "feature=rustc-dep-of-std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/cfg-if-1.0.0", "CARGO_PKG_VERSION": "1.0.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "cfg_if", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "cfg-if", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(47), name: CrateName("cfg_if"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/alexcrichton/cfg-if") } }, CrateId(237): CrateData { root_file_id: FileId(239), edition: Edition2018, version: Some("1.0.31"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_backtrace"), canonical_name: "test_backtrace" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/thiserror-1.0.31", "CARGO_PKG_VERSION": "1.0.31", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "thiserror", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "thiserror", "CARGO_PKG_VERSION_PATCH": "31", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(235), name: CrateName("thiserror"), prelude: true }, Dependency { crate_id: CrateId(248), name: CrateName("thiserror_impl"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/thiserror") } }, CrateId(103): CrateData { root_file_id: FileId(104), edition: Edition2021, version: Some("0.2.2"), display_name: Some(CrateDisplayName { crate_name: CrateName("ui"), canonical_name: "ui" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/impl-trait-for-tuples-0.2.2", "CARGO_PKG_VERSION": "0.2.2", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "impl_trait_for_tuples", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "impl-trait-for-tuples", "CARGO_PKG_VERSION_PATCH": "2", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "2", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(101), name: CrateName("impl_trait_for_tuples"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/bkchr/impl-trait-for-tuples") } }, CrateId(158): CrateData { root_file_id: FileId(160), edition: Edition2018, version: Some("1.0.7"), display_name: Some(CrateDisplayName { crate_name: CrateName("paste"), canonical_name: "paste" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/paste-1.0.7", "CARGO_PKG_VERSION": "1.0.7", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "paste", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "paste", "CARGO_PKG_VERSION_PATCH": "7", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: true }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/paste") } }, CrateId(24): CrateData { root_file_id: FileId(24), edition: Edition2015, version: Some("1.1.0"), display_name: Some(CrateDisplayName { crate_name: CrateName("traits"), canonical_name: "traits" }), cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-1.1.0", "CARGO_PKG_VERSION": "1.1.0", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "autocfg", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "autocfg", "CARGO_PKG_VERSION_PATCH": "0", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "1", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(20), name: CrateName("autocfg"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/cuviper/autocfg") } }, CrateId(213): CrateData { root_file_id: FileId(215), edition: Edition2018, version: Some("1.0.95"), display_name: Some(CrateDisplayName { crate_name: CrateName("test_meta"), canonical_name: "test_meta" }), cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=clone-impls", "feature=default", "feature=derive", "feature=extra-traits", "feature=fold", "feature=full", "feature=parsing", "feature=printing", "feature=proc-macro", "feature=quote", "feature=test", "feature=visit", "feature=visit-mut", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "1", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.95", "CARGO_PKG_VERSION": "1.0.95", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "syn", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "syn", "CARGO_PKG_VERSION_PATCH": "95", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "0", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(257), name: CrateName("unicode_ident"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/dtolnay/syn") } }, CrateId(79): CrateData { root_file_id: FileId(80), edition: Edition2018, version: Some("0.99.17"), display_name: Some(CrateDisplayName { crate_name: CrateName("generics"), canonical_name: "generics" }), cfg_options: CfgOptions(["debug_assertions", "feature=display", "feature=from", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=add", "feature=add_assign", "feature=as_mut", "feature=as_ref", "feature=constructor", "feature=convert_case", "feature=default", "feature=deref", "feature=deref_mut", "feature=display", "feature=error", "feature=from", "feature=from_str", "feature=generate-parsing-rs", "feature=index", "feature=index_mut", "feature=into", "feature=into_iterator", "feature=is_variant", "feature=iterator", "feature=mul", "feature=mul_assign", "feature=nightly", "feature=not", "feature=peg", "feature=rustc_version", "feature=sum", "feature=testing-helpers", "feature=track-caller", "feature=try_into", "feature=unwrap", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/derive_more-0.99.17", "CARGO_PKG_VERSION": "0.99.17", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "derive_more", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "derive_more", "CARGO_PKG_VERSION_PATCH": "17", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "99", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(54), name: CrateName("derive_more"), prelude: true }, Dependency { crate_id: CrateId(166), name: CrateName("proc_macro2"), prelude: true }, Dependency { crate_id: CrateId(173), name: CrateName("quote"), prelude: true }, Dependency { crate_id: CrateId(202), name: CrateName("syn"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/JelteF/derive_more") } }, CrateId(134): CrateData { root_file_id: FileId(136), edition: Edition2018, version: Some("0.10.3"), display_name: Some(CrateDisplayName { crate_name: CrateName("tree_fold1"), canonical_name: "tree_fold1" }), cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), potential_cfg_options: CfgOptions(["debug_assertions", "feature=default", "feature=use_alloc", "feature=use_std", "panic=unwind", "target_abi=", "target_arch=x86_64", "target_endian=little", "target_env=gnu", "target_family=unix", "target_feature=fxsr", "target_feature=llvm14-builtins-abi", "target_feature=sse", "target_feature=sse2", "target_has_atomic=16", "target_has_atomic=32", "target_has_atomic=64", "target_has_atomic=8", "target_has_atomic=cas", "target_has_atomic=ptr", "target_has_atomic_equal_alignment=16", "target_has_atomic_equal_alignment=32", "target_has_atomic_equal_alignment=64", "target_has_atomic_equal_alignment=8", "target_has_atomic_equal_alignment=ptr", "target_has_atomic_load_store=16", "target_has_atomic_load_store=32", "target_has_atomic_load_store=64", "target_has_atomic_load_store=8", "target_has_atomic_load_store=cas", "target_has_atomic_load_store=ptr", "target_os=linux", "target_pointer_width=64", "target_thread_local", "target_vendor=unknown", "test", "unix"]), env: Env { entries: {"CARGO_PKG_LICENSE": "", "CARGO_PKG_VERSION_MAJOR": "0", "CARGO_MANIFEST_DIR": "/home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.3", "CARGO_PKG_VERSION": "0.10.3", "CARGO_PKG_AUTHORS": "", "CARGO_CRATE_NAME": "itertools", "CARGO_PKG_LICENSE_FILE": "", "CARGO_PKG_HOMEPAGE": "", "CARGO_PKG_DESCRIPTION": "", "CARGO_PKG_NAME": "itertools", "CARGO_PKG_VERSION_PATCH": "3", "CARGO": "cargo", "CARGO_PKG_REPOSITORY": "", "CARGO_PKG_VERSION_MINOR": "10", "CARGO_PKG_VERSION_PRE": ""} }, dependencies: [Dependency { crate_id: CrateId(4), name: CrateName("proc_macro"), prelude: false }, Dependency { crate_id: CrateId(1), name: CrateName("core"), prelude: true }, Dependency { crate_id: CrateId(0), name: CrateName("alloc"), prelude: true }, Dependency { crate_id: CrateId(6), name: CrateName("std"), prelude: true }, Dependency { crate_id: CrateId(8), name: CrateName("test"), prelude: false }, Dependency { crate_id: CrateId(117), name: CrateName("itertools"), prelude: true }, Dependency { crate_id: CrateId(82), name: CrateName("either"), prelude: true }], proc_macro: [], origin: CratesIo { repo: Some("https://github.com/rust-itertools/itertools") } }} }) }
